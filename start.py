from aiogram import Dispatcher,Bot,executor,types

from aiogram.dispatcher.filters.state import State, StatesGroup

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.markdown import link
from aiogram.dispatcher import FSMContext
from keyboards import *
import datetime
import asyncio
from datas import *

import datetime


#token = '6688184356:AAHnpDSf6p9JU0EtXL_S3NMs4pd89m5QsaM'




token = '6816427189:AAFJWYBA8tDx1psz5nUZ1CXpZAGqcwk-XQw'

bot = Bot(token=token)
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)

@dp.message_handler(commands=['start'])
async def startx(msg: types.Message): 
    if msg.from_user.username is None:
        await msg.answer(' ``` –î–æ–±–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∏–∫–Ω–µ–π–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö ``` ', parse_mode='Markdown') 
    else:
        await state_5(userid=msg.from_user.id,username=msg.from_user.username,first_name=msg.from_user.first_name)
        s = await get_prem(msg.from_user.id)
        if s == '0' or s is None:
            await msg.answer('*–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—à–µ–º—É –±–æ—Ç—É!* üòî\n–ß—Ç–æ–±—ã —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–∫—É–ø–∫–æ–π –∞–¥–º–∏–Ω–∫–∏ –∫ @elijist',parse_mode='Markdown')
        else:
            await msg.answer(text='*–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –∞–¥–º–∏–Ω!*\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ ¬´–ö–∞–±–∏–Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞¬ª –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–±–æ—Ä–∞–º–∏',parse_mode='Markdown', reply_markup=wel())
                
            
@dp.message_handler(text='–ö–∞–±–∏–Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
async def nabors(msg: types.Message):
    s = await get_prem(msg.from_user.id)
    if s == '0' or s is None:
        await msg.answer('*–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—à–µ–º—É –±–æ—Ç—É!* üòî\n–ß—Ç–æ–±—ã —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–∫—É–ø–∫–æ–π –∞–¥–º–∏–Ω–∫–∏ –∫ @elijist',parse_mode='Markdown')
    else:

        await msg.answer_photo(photo='https://i.yapx.ru/YWL7C.png',caption='*üë®üèº‚Äçüíª –ö–∞–±–∏–Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n–ò—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –Ω–∞–±–æ—Ä—ã –Ω–∞ –∑–∞–¥–∞–Ω–∏—è ',parse_mode='Markdown', reply_markup=casses())

class cases(StatesGroup):

    cases_ = State()
    price = State()
    usersc = State()
    other_ = State()

class adminadd(StatesGroup):
    add_xdx = State()
    
    timex_ = State()

class get_spam(StatesGroup):
    spam_start = State()
class del_admins(StatesGroup):
    del_ads = State()

class searches_(StatesGroup):
    search_start = State()

@dp.callback_query_handler(text='set_cases')
async def statex(css: types.CallbackQuery, state: FSMContext):
    await css.answer()
    s = await get_prem(css.from_user.id)
    try:
        if s == '0' or s is None:
            await css.message.answer('*–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—à–µ–º—É –±–æ—Ç—É!* üòî\n–ß—Ç–æ–±—ã —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–∫—É–ø–∫–æ–π –∞–¥–º–∏–Ω–∫–∏ –∫ @elijist',parse_mode='Markdown')
        else:
            await css.message.answer(text='*–ù–∞ –∫–∞–∫—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞—Ç—å –Ω–∞–±–æ—Ä?* \n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–∞–º –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é',parse_mode='Markdown', reply_markup=casses_5())
            await cases.cases_.set()
        
    except:
        await state.finish()
        
        
    


#@dp.message_handler(state=cases.cases_)
@dp.callback_query_handler(text_contains='answer_', state=cases.cases_)
async def state_(css: types.CallbackQuery, state: FSMContext):
    await css.answer()
    data = css.data.split('_')
    if data[1] != 'other':
        try:
            await state.update_data(cases_=data[1])

            await state.set_state(cases.price)
    
            await css.message.answer(f'*‚ñ∏ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:* {data[1]} \n \n–í–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∑–∞ –æ—Ç–∑—ã–≤', parse_mode='Markdown')
        except:
            await state.finish()
    else:
        await css.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã')
        await state.set_state(cases.other_)



@dp.message_handler(state=cases.other_)
async def state__(msg: types.Message, state: FSMContext):
    await state.update_data(cases_=msg.text)
    await state.set_state(cases.price)
    await msg.answer(f'*‚ñ∏ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:* {msg.text} \n \n–í–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∑–∞ –æ—Ç–∑—ã–≤', parse_mode='Markdown')

@dp.message_handler(state=cases.price)
async def state__(msg: types.Message, state: FSMContext):
        try:
            await state.update_data(price=msg.text)
            await state.set_state(cases.usersc)

            s = await state.get_data()
            await msg.answer(f"*‚ñ∏ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {s.get('cases_')} \n‚ñ∏ –û–ø–ª–∞—Ç–∞: {msg.text}*‚ÇΩ \n\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –Ω–∞–±–æ—Ä—É",parse_mode='Markdown')
            #await msg.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –Ω–∞–±–æ—Ä—É')
        
        except Exception as e:
            print(e)
            await state.finish()
            await msg.answer('–û—à–∏–±–∫–∞')

@dp.message_handler(state=cases.usersc)
async def state_(msg: types.Message, state: FSMContext):
    
    data = await state.get_data()

    
    
    try:
        await update_datas(cases=data['cases_'],price=data['price'],usersc=msg.text,userid=msg.from_user.id)
         
        await msg.answer(f'*‚ñ∏ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {data.get("cases_")} \n‚ñ∏ –ü–æ–ª—É—á–∏—Ç–µ –æ–ø–ª–∞—Ç—É: {data.get("price")}‚ÇΩ \n‚ñ∏ –û–ø–∏—Å–∞–Ω–∏–µ: {msg.text} \n \n‚òÖ –ü–∏—Å–∞—Ç—å: @{msg.from_user.username}* \n‚òÜ –ù–∞—à–∏ –≤—ã–ø–ª–∞—Ç—ã: @SHARDopl', reply_markup=sendx(), parse_mode='Markdown') 
        await state.finish()
    except Exception as e:
        print(e)
        
        await state.finish()
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')
    
    


@dp.callback_query_handler(text='cases_')
async def check_cases(css: types.CallbackQuery):
    await css.answer()
    datas = await select_any(css.from_user.id)
    s =  await get_prem(css.from_user.id)
    if s == '0' or s is None:
        await css.message.answer('*–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—à–µ–º—É –±–æ—Ç—É!* üòî\n–ß—Ç–æ–±—ã —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–∫—É–ø–∫–æ–π –∞–¥–º–∏–Ω–∫–∏ –∫ @elijist',parse_mode='Markdown')
    else:
        if datas[1] is None:
            await css.message.answer('*–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤!* ü§î\n–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–∞–±–æ—Ä, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',parse_mode='Markdown', reply_markup=casses())
        else:
            await css.message.answer(f'*‚ñ∏ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {datas[1]} \n‚ñ∏ –ü–æ–ª—É—á–∏—Ç–µ –æ–ø–ª–∞—Ç—É: {datas[2]}‚ÇΩ \n‚ñ∏ –û–ø–∏—Å–∞–Ω–∏–µ: {datas[4]} \n \n‚òÖ –ü–∏—Å–∞—Ç—å: @{css.from_user.username}* \n‚òÜ –ù–∞—à–∏ –≤—ã–ø–ª–∞—Ç—ã: @SHARDopl', reply_markup=sendx(), parse_mode='Markdown')


#@router.message(F.text == ('–ù–∞–∑–∞–¥'))
#async def swelx_(msg: types.Message):
        #await msg.answer('üéâ', reply_markup=wel())
        #await msg.delete()




#@router.message(F.text==('–ü—Ä–æ—Ñ–∏–ª—å'))
#async def profile(msg: types.Message):
       # s = await get_prem(msg.from_user.id)
        #if s is None:
            #await msg.answer_photo(photo='https://i.yapx.ru/XG8zz.png',caption=f' –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ:\n \n‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ \n ID: {msg.from_user.id} \n –í–∞—à —Å—Ç–∞—Ç—É—Å: –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å\n‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ', parse_mode='Markdown')
            
        #else:
            #await msg.answer_photo(photo='https://i.yapx.ru/XG8zz.png',caption=f' –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ:\n \n‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ \n ID: {msg.from_user.id} \n –í–∞—à —Å—Ç–∞—Ç—É—Å: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n‚ûñ ‚ûñ ‚ûñ ‚ûñ ‚ûñ', parse_mode='Markdown')
            





@dp.callback_query_handler(text='starts_')
async def sendx_(css: types.CallbackQuery):
    await css.answer()
    datas = await select_any(css.from_user.id)
    s_ = await get_prem(css.from_user.id)
    get_ = await get_new_iff(css.from_user.id)
    if s_ == '0' or s_ is None:
        pass
    elif get_ == 5:
        await css.message.answer('*–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π –Ω–∞–±–æ—Ä!*\n–ü–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –Ω–æ–≤–æ–≥–æ, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ ¬´–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–±–æ—Ä–æ–º¬ª –∏ –∑–∞–∫—Ä–æ–π—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π',  parse_mode='Markdown')
    elif datas[1] is None:
        await css.message.answer('*–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç –Ω–∞–±–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏!*\n–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞–±–æ—Ä, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ ¬´–ö–∞–±–∏–Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞¬ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–∞–±–æ—Ä –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ', parse_mode='Markdown')
    else:
        #1001892774322
        #1002296257073
        s = await bot.send_message(chat_id=-1001892774322, text=f' *‚ñ∏ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {datas[1]} \n‚ñ∏ –ü–æ–ª—É—á–∏—Ç–µ –æ–ø–ª–∞—Ç—É: {datas[2]}‚ÇΩ \n‚ñ∏ –û–ø–∏—Å–∞–Ω–∏–µ: {datas[4]} \n \n‚òÖ –ü–∏—Å–∞—Ç—å: @{css.from_user.username}* \n‚òÜ –ù–∞—à–∏ –≤—ã–ø–ª–∞—Ç—ã: @SHARDopl', parse_mode='Markdown', reply_markup=otk(css.from_user.username))
                
        unix_time = datetime.datetime.now() + datetime.timedelta(minutes=90)
        unix_time5 = int(unix_time.timestamp())

        await set_iff(msgid=s.message_id,unix=unix_time5,userid=css.from_user.id)
        await update_sedns(sends=5,userid=css.from_user.id)
        await css.answer('–í–∞—à –Ω–∞–±–æ—Ä –æ—Ç–∫—Ä—ã–ª—Å—è ‚òëÔ∏è', show_alert=True)


@dp.callback_query_handler(text='starts%')
async def sendx_555(css: types.CallbackQuery):
    sends = await get_sends(css.from_user.id)
    await bot.edit_message_text(text=f'üîí *–î–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å.*\n*–î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–æ–≤–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ*\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ö–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É?¬ª, —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è\n—Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º –∑–∞—Ä–∞–±–æ—Ç–∫—É',chat_id=-1001892774322, message_id=sends, parse_mode='Markdown',disable_web_page_preview=True, reply_markup=urlsr_())
    await upt_(css.from_user.id)
    await update_sedns(sends=1,userid=css.from_user.id)
    await css.answer('–£–¥–∞–ª–µ–Ω–æ')


@dp.callback_query_handler(text='starts-')
async def sendx_5(css: types.CallbackQuery):
    await css.answer()
    await css.message.answer_photo(photo='https://i.yapx.ru/YWL7C.png',caption='*üë®üèº‚Äçüíª –ö–∞–±–∏–Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n–ò—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –Ω–∞–±–æ—Ä—ã –Ω–∞ –∑–∞–¥–∞–Ω–∏—è ',parse_mode='Markdown', reply_markup=casses())



@dp.message_handler(commands='admin')
async def ads_(msg: types.Message):
    if msg.from_user.id == 686674950 or msg.from_user.id == 1624519308:
        await msg.answer('–í—ã –∞–¥–º–∏–Ω', reply_markup=ads_55())
    
    
    
    
    
    else:
        await msg.answer('–û—Ç–∫–∞–∑–∞–Ω–æ')




@dp.message_handler(text='–ü–æ–∏—Å–∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫—É', state=None) 
async def search_(msg: types.Message, state: FSMContext):
    try:
        if msg.from_user.id == 686674950 or msg.from_user.id == 1624519308:
            await msg.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ @', reply_markup=cansel5())
            await state.set_state(searches_.search_start)
    except Exception as e:
        pass





@dp.message_handler(state=searches_.search_start)
async def state_search(msg: types.Message, state: FSMContext):
    try:
        async with aiosqlite.connect('teg.db') as tc:
            async with tc.execute('SELECT username FROM users WHERE username = ?', (msg.text,)) as t:
                x = await t.fetchone()
            async with tc.execute('SELECT * from users WHERE username = ?', (x[0],)) as t_:
                s = await t_.fetchone()
            await msg.answer(f'ID : {s[0]}\n nickname : @{s[5]} \n firstname: {s[6]} \n –í—Ä–µ–º—è : {s[7]} \n –û—Å—Ç–∞–ª–æ—Å—å: {s[8]}', reply_markup=stttttt(s[0]))
            await msg.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=ads_55())
            await state.finish()
    except Exception as e:
        await msg.answer('–¢–∞–∫–æ–≥–æ –Ω–µ—Ç')
        await state.finish()
        print(e)

@dp.callback_query_handler(state='*', text='cansel5')
async def canels(css: types.CallbackQuery, state: FSMContext):
        await css.answer()
        await state.finish()
        await css.message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ!', reply_markup=ads_55())



@dp.message_handler(text='–°–ø–∏—Å–æ–∫ –ê–¥–º–∏–Ω–æ–≤')
async def admins_(msg: types.Message):
    try:
        row = InlineKeyboardMarkup()
        if msg.from_user.id == 686674950 or msg.from_user.id == 1624519308:
            
            async with aiosqlite.connect('teg.db') as tc:
                async with tc.execute('SELECT * FROM users') as t:
                    x = await t.fetchall()
            for s in x:
                rows = InlineKeyboardButton(text=f'@{s[5]} - {s[8]}', callback_data=f'add_@{s[0]}')
                    
                    
                row.add(rows)
            await msg.answer('–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤', reply_markup=row)
        else:
            pass
    except:
        pass


@dp.message_handler(text='–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', state=None)
async def spam_strsx(msg: types.Message, state: FSMContext):
    if msg.from_user.id == 686674950 or msg.from_user.id == 1624519308:
        await msg.answer('–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=cansel5())
        await state.set_state(get_spam.spam_start)


@dp.message_handler(state=get_spam.spam_start)
async def stam_it(msg: types.Message, state: FSMContext):
    try:
        async with aiosqlite.connect('teg.db') as tc:
            async with tc.execute('SELECT user_id FROM users') as t:
                s = await t.fetchall()
            for sends in s:
                try:
                    await bot.send_message(chat_id=sends[0], text=msg.text)
                except Exception as e:
                    print(e)
            await msg.answer('–†–∞—Å—Å—ã–ª–µ–Ω–æ', reply_markup=ads_55())
            await state.finish()
    except Exception as e:
        print(e)


@dp.callback_query_handler(text_contains='add_@')
async def add_ads_(css: types.CallbackQuery):

    rowsr = InlineKeyboardMarkup()
    rows_s = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='otmena')
    try: 
        async with aiosqlite.connect('teg.db') as tc:
            async with tc.execute('SELECT * FROM users WHERE user_id = ?', (int(css.data[5:]),)) as t:
                v = await t.fetchall()
        for s in v:
            rows = InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≤ –∞–¥–º–∏–Ω—ã', callback_data=f'admins_{s[0]}')
            rows_ = InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∏–∑ –∞–¥–º–∏–Ω–æ–≤', callback_data=f'remove_{s[0]}')
            rowsr.add(rows,rows_).add(rows_s)
            await css.message.answer(f'ID : {s[0]}\n User: @{s[5]} \n –í—Ä–µ–º—è : {s[7]} \n –û—Å—Ç–∞–ª–æ—Å—å: {s[8]}', reply_markup=rowsr)
    
    
    
    
    except:
        pass








@dp.callback_query_handler(text='otmena')
async def adsadsa(css: types.CallbackQuery):
    
    await css.message.delete()




@dp.callback_query_handler(text_contains='admins_', state=None)
async def state_ads_(css: types.CallbackQuery, state: FSMContext):
    
    try:
        s = css.data.split('_')
        #int(css.data[7:]
        await state.update_data(add_xdx=s[1])
    
    
    
        await css.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –∞–¥–º–∏–Ω–∫–∏ (–î–Ω–∏)', reply_markup=cansel5()) 


    
        await state.set_state(adminadd.add_xdx)
    except:

        await css.message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞')






@dp.message_handler(state=adminadd.add_xdx)
async def state_ads______(msg: types.Message, state: FSMContext):
    
    
    
    try:
        time_now = datetime.datetime.now().strftime('%Y-%m-%d %H:%M')

        time_delete = (datetime.datetime.now() + datetime.timedelta(days=int(msg.text))).strftime('%Y-%m-%d %H:%M')
        
        data = await state.get_data()
        s = await select_any(int(data['add_xdx']))
        async with aiosqlite.connect('teg.db') as tc:
            await tc.execute('UPDATE rat SET username = ?, username_admin = ?, time_now = ?, time_delete = ? WHERE user_id = ?', (s[5], msg.from_user.username,time_now, time_delete, int(data['add_xdx']),))
            await tc.execute('UPDATE users SET time_now = ?, time_delete = ? WHERE user_id = ?', (time_now, time_delete, int(data['add_xdx']),))
                    
            await tc.commit()
                
            await msg.answer('–î–æ–±–∞–≤–ª–µ–Ω–æ!')
            await state.finish()
        async with aiosqlite.connect('teg.db') as tc:
            async with tc.execute('SELECT username FROM users WHERE user_id = ?', (int(data['add_xdx']),)) as t:
                srs = await t.fetchone()
        #await bot.send_message(chat_id=686674950, text=f'@{msg.from_user.username} –î–æ–±–∞–≤–∏–ª - @{srs[0]} –ù–∞ {msg.text} –î–Ω–µ–π')
        await bot.send_photo(photo='https://i.yapx.ru/YWL8H.png',caption='üéâ *–í–∞–º –≤—ã–¥–∞–ª–∏ –∞–¥–º–∏–Ω–∫—É!*\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ–º—å—é SHARD',chat_id=int(data['add_xdx']),parse_mode='Markdown',reply_markup=casses())
    
    except Exception as e:
        print(e)
        await state.finish()
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')







@dp.callback_query_handler(text_contains='remove_')
async def remove_it(css: types.CallbackQuery):
    s = css.data.split('_')
    try:
        async with aiosqlite.connect('teg.db') as tc:
            async with tc.execute('SELECT username FROM users WHERE user_id = ? ', (int(s[1]),)) as t:
                srs = await t.fetchone()
        await bot.send_message(chat_id=686674950, text=f'@{css.from_user.username} –£–¥–∞–ª–∏–ª @{srs[0]} –ò–∑ –∞–¥–º–∏–Ω–æ–≤')
        async with aiosqlite.connect('teg.db') as tc:
                await tc.execute('DELETE FROM users WHERE user_id = ?', (int(s[1]),))
                await tc.commit()
        async with aiosqlite.connect('teg.db') as tc:
            await tc.execute('DELETE FROM new_iff WHERE user_id = ?', (int(s[1]),))
            await tc.commit()
        try:
            await bot.send_message(chat_id=int(s[1]), text='*–í–∞—à–∞ –∞–¥–º–∏–Ω–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –∏–ª–∏ –±—ã–ª–∞ —Å–Ω—è—Ç–∞!*\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @elijist',parse_mode='Markdown')
        except Exception as e:
            print(e)
    

        await css.message.answer('–£–¥–∞–ª–µ–Ω')
        
    except Exception as e:
        print(e)
        await css.message.answer('–ß—Ç–æ—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')




if __name__ == '__main__':
    s = asyncio.get_event_loop()
    s.run_until_complete(state_tttttt())
   
    executor.start_polling(dp, skip_updates=True)